<?php 

use \Drupal\views\Views;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
/**
 * Implements hook_preprocess_page().
 */
function civicrm_phenix_cfonb_preprocess_page(&$variables)
{
  $variables['#attached']['library'][] = 'civicrm_phenix_cfonb/civicrm_phenix_cfonb';
  $current_path = \Drupal::service('path.current')->getPath();
  

}



use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function civicrm_phenix_cfonb_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Check if it's the view you want to alter.
  



  //Page admin utilisateurs
  if ($view->id() == 'user_admin_people' && $display_id == 'page_1') {
    
  }


}



/**
 * selectionner automatiquemtn le groupe
 * Implements hook_form_alter().
 */
function civicrm_phenix_cfonb_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'civicrm_phenix_cfonb/civicrm_phenix_cfonb';
  
  $query = \Drupal::request()->query;
  if ($form['#form_id'] == 'civicrm_event_reunion_add_form') {
    $group_id = $query->get('group_id');
    $form['#access'] = true;
    $form['custom_179']['widget']['#default_value'] = $group_id;
  }
}



function civicrm_phenix_cfonb_preprocess_views_view_field(&$variables) {
  
  $view = $variables['view'];
  $field = $variables['field'];
  $requests = \Drupal::request();
  $row = $variables['row'];
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  if ($view->storage->id() == 'recherche' &&  $view->current_display == 'resultats_recherche') {
    if ($field->field == 'rendered_item') {
      // ($row);
    }
  }
  

  

	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_5') {
    if ($field->field == 'frontend_title') {
      // $formatted = implode(' ',str_split($value, 2));
      $title = $field->getValue($row);
      $default_title = $title ? $title : $row->civicrm_group_civicrm_group_contact_title;
      $group_id = $row->civicrm_group_civicrm_group_contact_id_1;
			$html = '<div class="my-meeting">
      <a href="/civicrm-group/' . $group_id . '">' . $default_title . '</a>
      </div>';
      $html = ['#markup' =>  $html]; 
      $variables['output'] = $html;
    }
  }

    //Page detail commissions / groupe
    if ($view->storage->id() == 'civi_groupe_evenements' /* && $view->current_display == 'block_1' */) {
      $custom_service = \Drupal::service('civicrm_phenix_cfonb.custom_service');
      $custom_service->customizeViewReunionOfTheCommissionPage($variables);
  
      
    }

      // You can now use $email for further processing.
	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_7') {
    // $variables['view']->header['area']->options['content'] = [];
    if ((!in_array('super_utilisateur', $user_roles) && !in_array('admin_client', $user_roles) && !in_array('permanent', $user_roles) && !in_array('administrator', $user_roles))) {
      $variables['view']->header['area']->options['content']['value'] = '<h2><i class="far fa-calendar-alt"></i> [view:title] </h2>';
    }    
  }


  
  if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_7') {
    // $custom_service->customizeMeetingList()
    $custom_service = \Drupal::service('civicrm_phenix_cfonb.custom_service');
    if ($field->field == 'title') {
      $title = $field->getValue($row);
      
      $date = $row->created_id_civicrm_contact_start_date;
      $dateArray = $custom_service->formatDateWithMonthInLetterAndHours($date);

      $variables['output'] = [
        '#theme' => 'page_list_meeting',
        '#cache' => ['max-age' => 0],
        '#content' => [
          'meeting_info' => $dateArray,
          'title' => $title,
        ],
      ];
    }
  }


}

/**
 * Implements hook_theme().
 */
function civicrm_phenix_cfonb_theme($existing, $type, $theme, $path)
{
    return [
      'nav_group_and_meeting' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'nav-meeting-and-group'
      ],
      'civicrm_phenix_cfonb_alter_view_detail_commission_reunion' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'alter-view-detail-commission-reunion'
      ],
      'detail_group' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'phenix-custom-block-detail-group'
      ],
      'page_list_meeting' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'page-list-meeting'
      ],
      'civicrm_phenix_cfonb_custom_last_doc' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'civicrm-phenix-cfonb-custom-last-doc'
      ],
      'document_group' => [
        'variables' => [
        'content' => Null,
        ],
        'render element' => 'children',
        'path' => $path . '/templates',
        'template' => 'document_group'
      ],
    ];
}


/**
 * 
 * Gestion de permission par rapport à l'utilisateur anonyme
 * 
 * Implements hook_entity_access().
 */
function civicrm_phenix_cfonb_media_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($account->isAnonymous()) {
   
  }
}


function getFieldValue($field, $entity) {
	$value = $entity->get($field)->getValue() ? $entity->get($field)->getValue()[0]['value'] : '';
	return $value;
}

function hideLabelOfValueField (&$build, $fieldName) {
  $build[$fieldName]['#label_display'] = 'hidden';
}

/**
 * Ce code sert à afficher 
 * Implements hook_entity_view_alter().
 */
function civicrm_phenix_cfonb_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
/* Formattage page civicrm-event */
  if (isset($build['#entity_type']) && $build['#entity_type'] == 'civicrm_event') {
    $civi_service = \Drupal::service('civicrm_phenix_cfonb.custom_service');
    //hide these fields
    unset($build['fee_label']);
    unset($build['participant_listing_id']); // champ Liste des participants
    unset($build['max_additional_participants']);//champ Nombre maximum de participants en plus par régistration
    unset($build['event_full_text']);//champ Information sur l'événement
    unset($build['default_role_id']); // champ Rôle par défaut
    unset($build['created_date']);//champ DATE DE CRÉATION DE L'ÉVÉNEMENT
    unset($build['custom_123']); //champ Convocation / Ordre du jour
    unset($build['custom_124']); //champ Compte rendu / Procès Verbal
    unset($build['custom_125']); //champ Pouvoir (modèle pour AG)
    unset($build['custom_4']); //champ Checkbox text
    unset($build['custom_5']); //champ Checkbox Position
    unset($build['custom_6']); //champ Link Label
    unset($build['custom_7']); //champ Introduction
    unset($build['custom_115']); //champ Programme
    unset($build['event_type_id']); //champ Type d'événement

    $title = getFieldValue('title', $entity);
    $intitule = $entity->event_title;

    hideLabelOfValueField($build, 'description');
    hideLabelOfValueField($build, 'start_date');
    hideLabelOfValueField($build, 'end_date');
    // hideLabelOfValueField($build, 'custom_179');

    if ($entity->hasField('custom_179')) {
      $idgroup = getNodeFieldValue($entity, 'custom_179');
      $intitule = \Civi\Api4\Group::get(FALSE)
      ->addSelect('title')
      ->addWhere('id', '=', $idgroup)
      ->execute()->first()['title'];
    }
    $title = '<div class="intitule-event">' . $intitule . '</div><h2 class="intitule-h2">' . $title  . '</h2>';
    // ($build);
    //Get start/end date values
    $start_date = getFieldValue('start_date', $entity);
    $end_date = getFieldValue('end_date', $entity);
    //adding class to date
    $build['end_date']['#attributes']['class'][] = 'date-end-event  test-classssss';
    $build['start_date']['#attributes']['class'][] = 'date-start-event  test-classssss';
    // ($build);

    $current_path = \Drupal::service('path.current')->getPath();
    
    $db = \Drupal::database();
    // ($build);
    $all_dates = $db->query('select title, start_date, end_date from civicrm_event where id = ' . $entity->id())->fetch();
    $get_end_date = $all_dates->end_date;
    $get_start_date = $all_dates->start_date;
    
    $formated_Y_m_d_start_date = $civi_service->formatDateTo_Y_m_d($get_start_date);
    $formated_Y_m_d_end_date = $civi_service->formatDateTo_Y_m_d($get_end_date);
    setlocale(LC_TIME, 'fr_FR');
    $formated_start_date = new \DateTime($get_start_date);
    $formatted_dateSt = \Drupal::service('date.formatter')->format($formated_start_date->getTimestamp(), 'custom', 'l, j F  Y H:i');
    $formated_end_date = new \DateTime($get_end_date);
    $formatted_dateEn = \Drupal::service('date.formatter')->format($formated_end_date->getTimestamp(), 'custom', 'l, j F  Y H:i');

    //enlever la minute si c'est 00
    $formatted_dateEn = str_replace(':00', 'h', $formatted_dateEn);
    $build['end_date'][0]['#text'] = $formatted_dateEn;
   


    

    if ($formated_Y_m_d_start_date === $formated_Y_m_d_end_date) { //if event started and end at the same day
      $end_date_val = isset($build['end_date'][0]['#context']) ?  $build['end_date'][0]['#context'] : '';
      $formated_end_date = new \DateTime($get_end_date);
      $formated_end_date = $formated_end_date->format('H:i');
      $formated_date_start = $formated_start_date->format('Y-m-d H:i');

      //enlever la minute si c'est 00
      $formated_end_date = str_replace(':00', 'h', $formated_end_date);
      $build['end_date'][0]['#text'] = $formated_end_date;
    }
    $build['end_date'][0]['#text'] = $formated_end_date;


    
    //enlever la minute si c'est 00
    $formatted_dateSt = str_replace(':00', 'h', $formatted_dateSt);
    
    $build['start_date'][0]['#text'] = $formatted_dateSt;
    $build['start_date'][0]['#prefix'] = '<div class="date-start-and-end date-duration-meeting"><time class="eventt-time">' . $formatted_dateSt . ' - ' . $formatted_dateEn . '</time>';
    $build['end_date'][0]['#suffix'] = '</div>';
    
    // $build['start_date']['#suffix'] = '<span> - </span>';
    $build['start_date']['#weight'] = -2;
    $build['end_date']['#weight'] = -2;
    $build['title']['#weight'] = -3;
    $build['custom_179']['#weight'] = -4;
    $build['description']['#weight'] = -1;

    // hideLabelOfValueField($build, 'custom_179');

    $build['custom_131']['#title'] = 'Groupes : ';
    //load view by id
    $args = [];
    $view = \Drupal\views\Views::getView('civi_event_fichiers');
    if (is_object($view)) {
      $view->setArguments($args);
      $view->setDisplay('block_1');
      $view->preExecute();
      $view->execute();
      $view_result = $view->result;

      if ($view_result) {
        $pouvoir_pour_ag = isset($view_result[0]->civicrm_value_sp_cifique_r__38_pouvoir_mod_le__125) ? $view_result[0]->civicrm_value_sp_cifique_r__38_pouvoir_mod_le__125 : '';
        $convocation_ordre_du_jour =  isset($view_result[0]->civicrm_value_sp_cifique_r__38_convocation_ordre_du_jour_123) ?$view_result[0]->civicrm_value_sp_cifique_r__38_convocation_ordre_du_jour_123 : '';
        $compte_rendu_proc_s_verbal = isset($view_result[0]->civicrm_value_sp_cifique_r__38_compte_rendu_proc_s_verbal_12) ? $view_result[0]->civicrm_value_sp_cifique_r__38_compte_rendu_proc_s_verbal_12 : '';

        if ($compte_rendu_proc_s_verbal || $convocation_ordre_du_jour || $pouvoir_pour_ag) {
        $content = $view->buildRenderable('block_1', $args);
        $rendered_view = \Drupal::service('renderer')->render($content);
        $build['custom_131']['#suffix'] = '<p class="attachmennts">Documents : </p>' . $rendered_view->__toString();
        }

      }
    }

    $doc = $build['#civicrm_event']->get('field_documents')->getValue();
      $doc_ids = array_column($doc, 'target_id');
    

    $all_documents = [];
    $total_docs = 0;
    foreach ($doc_ids as $paragraph_id) {
      $media = \Drupal\media\Entity\Media::load($paragraph_id);
      if ($media) {
        $id_document = $media->get('field_media_document')->getValue();
        if ($id_document) {

          $title_doc = $media->label();
          $file = $media->get('field_media_document')->entity;
          $mimetype = $file->getMimeType();
          $createfileurl = $file->createFileUrl();
          $sizz = $civi_service->getFileSize($file);

          $created_at = $civi_service->convertTimesptamToDate($civi_service->getNodeFieldValue($media, 'created'));

          switch($mimetype) {
            case 'application/pdf':
              $file_type = 'pdf-3.png';
              break;
            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
              $file_type = 'pdf-2.png';
              break;
              case 'application/msword':
              $file_type = 'pdf-2.png';
              break;
              case 'application/rtf':
                $txt_file = '.rtf';
              break;
            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              $file_type = 'pdf.png';
              break;
            case 'application/vnd.ms-excel':
              $file_type = 'pdf.png';
              break;
            case 'application/zip':
              $file_type = 'zip-file.png';
              break;
            }



          $all_documents[$title_doc][] = [
            'fileType' => $file_type,
            'fileurl' => $file->createFileUrl(),
            'size' => $sizz,
            'fileId' => $file->id(),
            'description' => $title_doc,
            'created_at' => $created_at,
            'media_id' => $media->id(), 
          ];




          /* $nom_document = $id_document[0]['description'];
          $id_document = $id_document[0]['target_id'];
          $file = \Drupal\file\Entity\File::load($id_document);
          if($file) {
            $total_docs++;
            $file_uri = $file->get('uri')->getValue()[0]['value'];
            $tmp_uri = $file_uri;


            $tmp_name = str_replace ('public://documents/', '', $tmp_uri);
            $nom_document = $nom_document ? $nom_document : $tmp_name;

            $file_url = file_create_url($file_uri);
            $link = \Drupal\Core\Link::fromTextAndUrl($nom_document, \Drupal\Core\Url::fromUri($file_url));
            $link_html .= '
            <img loading="lazy" src="/files/styles/vignette_24x24/public/media-icons/generic/generic.png">
            '
            . \Drupal::service('renderer')->render($link->toRenderable())->__toString(). '<br>';

          } */
        }
      }
    }

     if (!empty($all_documents)) {


    $get_first_element = reset($all_documents);
    $first_title = isset(array_keys($all_documents)[0]) ? array_keys($all_documents)[0] : '';
    $first_element_id = $get_first_element[0]['media_id'];
    $media = Drupal\media\Entity\Media::load($first_element_id);
    $file_type = 'application/pdf';//default
    if ($media) {
      // $title = $first_title;
      // $first_element_file_id = getNodeFieldValue($media, 'field_media_document');
      // $first_file_document = File::load($first_element_file_id);
      // $first_file_extension = getNodeFieldValue($first_file_document, 'filemime');
      $file_type = $get_first_element[0]['fileType'];
    }
    $file_size_readable = $get_first_element[0]['size'];


    // // Convert the size to a human-readable format
    // $file_size_readable = round($file_size_bytes / 1024, 2);

    $date_doc = $civi_service->convertTimesptamToDate($civi_service->getNodeFieldValue($media, 'created'));

    // $html = ['#markup' => $media_extrait];
    // $html = \Drupal::service('renderer')->render($html);
    unset($all_documents[$first_title][0]);

    //Récuperation du second dernier document
    /* $secondElm = reset($all_documents)[1];
    $secondElmId = $secondElm['media_id'];
    $media = Media::load($secondElmId);
    $secondDataDoc = $civi_service->getDataSecondDocument($media);
    unset($all_documents[$first_title][1]);   *///TODO Commenté pour le moment à decommenté si on en a besoin
    //end recuperation ****----------
    
    // $allowToEdit = $civi_service->checkIfUserCanEditDoc ();
    
    $counted_doc = count(reset($all_documents));

    $file_id = $civi_service->getNodeFieldValue($media, 'field_media_document');
    $file0bj = File::load($file_id);
    $file_size_readable = $civi_service->getFileSize($file0bj);
    // $display_see_other_doc = ($counted_doc > 1); TODO 
    $display_see_other_doc = (count($all_documents) > 2 || count(reset($all_documents)));//TODO à mettre sup à 2 car les deux seront au dessus



    $module_path = \Drupal::service('module_handler')->getModule('civicrm_phenix_cfonb')->getPath();
    $image_path = $module_path . '/file/pdf-3.png';

    $event_id = $build['#civicrm_event']->get('id')->getValue()[0]['value'];


    switch($file_type) {
      case 'application/pdf':
        $file_type = 'pdf-3.png';
        break;
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        $file_type = 'pdf-2.png';
        break;
        case 'application/msword':
        $file_type = 'pdf-2.png';
        break;
        case 'application/rtf':
          $txt_file = '.rtf';
        break;
      case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        $file_type = 'pdf.png';
        break;
      case 'application/vnd.ms-excel':
        $file_type = 'pdf.png';
        break;
      }

    
    $build['documents'] = [
      '#theme' => 'civicrm_phenix_cfonb_custom_last_doc',
      '#cache' => ['max-age' => 0],
      '#content' => [
        'pic' => $image_path,
        'data' => $all_documents,
        'first_element' => $get_first_element,
        'first_title' => $first_title,
        'file_type' => $file_type,
        'file_size' => $file_size_readable/* $file_size */,
        'date_doc' => $date_doc,
        'first_element_id' => $first_element_id,
        'first_element_title' => $first_title,
        'display_see_other_doc' => $display_see_other_doc,
        'is_page_last_doc' => true,
        'can_edit_doc' => true,//$allowToEdit,
        // 'second_document_data' => $secondDataDoc
      ]
    ];

  }


    $build['download_all_doc']['#markup'] = $total_docs > 1 ? '<br>
    
    <a data-total-docs="'.$total_docs.'" href="/media_download_all/civicrm_event/' . $event_id . '/field_documents" class="media-download-all">Télécharger tous les fichiers (zip)aaaaaa</a>' : '';
    //custom title display
    $build['start_date']['#prefix'] = ucfirst($title) . '<br>';
  }

  if (isset($build['#entity_type']) && $build['#entity_type'] == 'civicrm_group') {
    if (isset($build['_layout_builder'])) {

      foreach ($build['_layout_builder'] as $key => $value) {
        // dump($build['_layout_builder']);
        if (isset($value['content'])) {
          foreach($value['content'] as $k => $v) {
            if (isset($v['#plugin_id']) && $v['#plugin_id'] == 'field_block:civicrm_group:civicrm_group:field_documents_groupe') {


            // Get the block plugin manager service.
            $block_manager = \Drupal::service('plugin.manager.block');

            // Create a block plugin instance.
            $block_plugin = $block_manager->createInstance('document_document_group');

            // Get the block's configuration and context.
            // $block_plugin->setConfiguration([]);
            // $block_plugin->setContext([]);
            
            // Build the block render array.
            $block_build = $block_plugin->build();

            // Render the block.
            $renderer = \Drupal::service('renderer');
            $block_content = $renderer->render($block_build);

              $build['_layout_builder'][$key]['content'][$k]['content'][0] = [ '#theme' =>  'document_group', "#content" => $block_content ];
            }
            
          }
        }
      }
    }
  }

  // if ($build['#entity_type'] == 'civicrm_group') {
  //   // ($build);
  // }

}
 

/**
 * Implements hook_views_query_alter().
 */
function civicrm_phenix_cfonb_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {

  //Feuille de presence ==> ne pas afficher les contact qui sont supprimés
  // if ($view->storage->get('id') == 'attendance_sheet' && $view->current_display == 'attendance_sheet_edit') {
  //   $query->where[] =  array(
  //     'conditions' => array(
  //       array(
  //         'field' => 'civicrm_contact_civicrm_participant.is_deleted',
  //         'value' => 'false',
  //         'operator' => '=',
  //       ),
  //     ),
  //     'type' => 'AND',
  //   );
  // }
}

/**
 * Implements hook_entity_view().
 */
function civicrm_phenix_cfonb_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // Get the current request object.
  $request = \Drupal::request();

  // Get the path of the current request.
  $current_path = $request->getPathInfo();

   // Check if the path contains "/civicrm-group/".
   if (strpos($current_path, '/civicrm-group/') !== false) {
    if ($entity->getEntityTypeId() == 'media') {
      // unset($build[''])
      $build['field_media_document'][0]['#attributes']['class'][] = 'to-hide-doc';
      $build['#attributes']['class'][] = 'to-hide-doc';
    }
  }


  if ($entity->getEntityTypeId() === 'civicrm_group' and $view_mode === 'full') {
    //unset($build['#civicrm_group']->getFieldDefinitions()['field_documents_groupe']); 
    $build['#attributes']['class'][] = 'group-detail-page';




    if (isset($build['_layout_builder'][0]['content'])) {
      foreach($build['_layout_builder'][0]['content'] as $key_layout => $value_layout){
        // ($value_layout);
        // if ($build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name'] == 'title') {
        //   $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#context']['value'] = '';
        // }

        if (isset($value_layout['content']['#field_name']) && $value_layout['content']['#field_name'] == 'frontend_description') {
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#context'] = [];
          // $build['_layout_builder'][0]['content'][$key_layout]['content']['#title'] = '';
        }
        // if ($build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name'] == 'start_date') {
        //   $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#text'] = '';
        //   $build['_layout_builder'][0]['content'][$key_layout]['content']['#title'] = '';
        // }

        // if (isset($value_layout['#plugin_id']) && strpos($value_layout['#plugin_id'], 'civicrm_event:civicrm_event:field_documents') !== false) {
        //   unset($build['_layout_builder'][0]['content'][$key_layout]);
        // }
      }
    }



  }


  if ($entity->getEntityTypeId() === 'civicrm_event') {
    // Modify the node view for the 'full' view mode.
    if ($view_mode === 'full') {
      $custom_service = \Drupal::service('civicrm_phenix_cfonb.custom_service');
      // Add a custom field to the entity view.
      unset($build['max_participants']);
      
      // Get the current user object.
      $current_user = \Drupal::currentUser();
      // Check if the user is authenticated (logged in).
      if ($current_user->isAuthenticated()) {
        // Get the email address of the current user.
        $email = $current_user->getEmail();
        // You can now use $email for further processing.
        $cid = $custom_service->getContactIdByEmail($email);
        $event_id = \Drupal::request()->attributes->get('civicrm_event')->get('id')->getValue()[0]['value'];
        $participant_id = \Civi\Api4\Participant::get(FALSE)
        ->addSelect('id')
        ->addWhere('contact_id', '=', $cid)
        ->addWhere('event_id', '=', $event_id)
        ->execute()->first();
        $participant_id = isset($participant_id['id']) ? $participant_id['id'] : null;
        // ($participant_id, $cid, $event_id);
        $build['title'][0]['#prefix'] = '<div class="title-detail-meeting">';
        $build['title'][0]['#suffix'] = '</div>';
        // unset($build['end_date']);
        // unset($build['start_date']);

        $build['custom_179']['#prefix'] = '<div class=" asheeeeeeeeeeeeee meeting-page"><i class="icon-custom-calendar custom-icon-meeting"></i></div>';
        /* $build['description']['#prefix'] = '<div class="meeting-confirm-my-presence">
        
        <a href="/civicrm-participant/' . $participant_id . '/edit" class="button js-form-submit form-submit">Je confirme ma présence</a>
        </div>'
        ; */
        // $ex = '<a href="#" class="button js-form-submit form-submit">Excuser</a>';
      }
    }
    
    
    //Ne pas afficher l'affichage par defaut des documents
    // $build['_layout_builder'][1]['#settings']['#id'] = 'nouveau-test-partici';
    // ($build['_layout_builder'][1]);
    if (isset($build['_layout_builder'][0]['content'])) {
      
      foreach($build['_layout_builder'][0]['content'] as $key_layout => $value_layout){
        if (!isset($build['_layout_builder'][0]['content'][$key_layout]['content'])) {
          continue;
        }
        if (isset($build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name']) && $build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name'] == 'title') {
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#context']['value'] = '';
        }

        if (isset($build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name']) && $build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name'] == 'end_date') {
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#text'] = '';
          $build['_layout_builder'][0]['content'][$key_layout]['content']['#title'] = '';
        }
        if (isset($build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name']) && $build['_layout_builder'][0]['content'][$key_layout]['content']['#field_name'] == 'start_date') {
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#text'] = '';
          $build['_layout_builder'][0]['content'][$key_layout]['content']['#title'] = '';
        }

        if (isset($value_layout['#plugin_id']) && strpos($value_layout['#plugin_id'], 'civicrm_event:civicrm_event:field_documents') !== false) {
          unset($build['_layout_builder'][0]['content'][$key_layout]);
        }


        //ne pas afficher la date
        if (isset($value_layout['content'][0]['#field_name']) && ($value_layout['content'][0]['#field_name'] == 'title' || $value_layout['content'][0]['#field_name'] == 'start_date' || $value_layout['content'][0]['#field_name'] == 'end_date')){
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0]['#title'] = '';
          $build['_layout_builder'][0]['content'][$key_layout]['content'][0][0]['#text'] = '';
          
          if ($value_layout['content'][0]['#field_name'] == 'title') {
            $build['_layout_builder'][0]['content'][$key_layout]['content'][0][0]['#context']['value'] = '';
            // dump($build['_layout_builder'][0]['content'][$key_layout]['content']);
          }
        }

      }
    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function civicrm_phenix_cfonb_preprocess_block(&$variables) {
  // Check if the block is a specific block you want to alter.
  // For example, if you want to target a block with a specific machine name:
  if (isset($variables['content'][0]['#bundle']) && $variables['content'][0]['#bundle'] == 'civicrm_group' && $variables['plugin_id'] == 'field_block:civicrm_group:civicrm_group:title') {
    $current_group_id = \Drupal::request()->get('civicrm_group')->get('id')->getValue()[0]['value'];
    $btn_add_meet = '<a class="btn-add-meeting" href="/civicrm-event/add?group_id=' . $current_group_id . '"><i class="fa fa-plus-circle"></i>Ajouter une réunion</a>';
    if (isAdherent()) {
      $btn_add_meet = '';
    }
    
    // dump($variables['content']);
      $variables['content'][0][0]['#context']['value'] = Drupal\Core\Render\Markup::create('<div class="meeting-head"><h2 class="meetings"><i class="icon-custom-calendar"></i>Réunions</h2> ' . $btn_add_meet . '');
      $variables['attributes']['class'][] = 'bloc-head-meetings-in-theme '. json_encode(\Drupal::currentUser()->getRoles());

  }

  if (isset($variables['plugin_id']) && $variables['plugin_id'] == 'system_menu_block:account') {

      // Get the current user.
      $current_user = \Drupal::currentUser();

      // Get the user ID.
      $uid = $current_user->id();

      // Get the username.
      $username = $current_user->getAccountName();

      $variables['elements']['#suffix'] = '<p> bloo </p>';
      $custom_element = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => ['class' => ['custom-element']],
        '#value' => $username,
      ];
  
      // Append the custom element directly to the block's content array.
      $variables['title_suffix']['custom_element'] = $custom_element;


      if (isset($variables['content']['#items'])) {
        $items = &$variables['content']['#items'];
    
        // Get the last item key and check if it's 'masquerade.unmasquerade'.
        $last_item_key = array_key_last($items);
        if ($last_item_key && strpos($last_item_key, 'masquerade.unmasquerade') !== false) {
    
          // Get the last item (masquerade.unmasquerade).
          $last_item = $items[$last_item_key];
    
          // Remove the last item from the array.
          unset($items[$last_item_key]);
    
          // Convert the array into an indexed array.
          $items = array_values($items);
    
          // Insert the 'masquerade.unmasquerade' item into the second-to-last position.
          array_splice($items, count($items) - 1, 0, [$last_item]);
    
          // Convert the indexed array back to its original structure.
          $items = array_combine(
            array_keys($variables['content']['#items']),
            $items
          );
        }
        }
  }
}

function isAdherent () {
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  $isAdherent = true;
  if (in_array('super_utilisateur', $user_roles) || in_array('permanent', $user_roles) || in_array('partenaire', $user_roles)  || in_array('animateur', $user_roles) || in_array('administrator', $user_roles)) {
    $isAdherent = false;
  }
  return $isAdherent;
}